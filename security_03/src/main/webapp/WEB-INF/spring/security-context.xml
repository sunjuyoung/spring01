<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
	<!-- 네임스페이스 수정 -->
	<!-- 스프링 시큐리티는  단독으로 설정할 수 있기 때문에 별도로 context.xml 관리  -->





	<!-- 로그인한 사용자에 부여된  -->
	<!-- customLoginSuccessHandler" 빈등록 -->
	<bean id="customLoginSuccessHandler"
		class="com.test.security.CustomLoginSuccessHandler"></bean>
		
		
			<!-- CustomAccessDeniedHandler 빈등록 -->
		
		<bean id="customAccessDeniedHandler" class="com.test.security.CustomAccessDeniedHandler"></bean>
		
		<!-- userDetailsService  -->
		<bean id="customUserDetailsService" class="com.test.security.CustomUserDetailsService"></bean>


	<!--passwordEncode  -->
<!-- 	<bean id="customNoOpPasswordEncoder"
		class="com.test.security.CustomNoOpPasswordEncoder"></bean> -->

<!-- 스프링 시큐리티 API 제공하는 BCryptPasswordEncoder 패스워드 암호화  해시함수로 특정 문자열을 암호화
 하고 체크하는 쪽에서는 암호화 된 패스워드가 가능한 패스워드인지만 확인하고 다시 원문으로 되돌리지는 못한다-->
 <!-- api제공 하므로 빈설정만 하면된다 -->
<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>
								       					


	<security:http>

		<!--특정 uri접근할 떄 이용하는 설정 -->
		<security:intercept-url pattern="/sample/all"
			access="permitAll" />

		<security:intercept-url
			pattern="/sample/member" access="hasRole('ROLE_MEMBER')" />
		<!--access 속성값으로 사용되는 문자열은 1.표현식, 2.권한명을 의미하는 문자열 표현식을 권장한다 -->

		<security:intercept-url pattern="/sample/admin"
			access="hasRole('ROLE_ADMIN')" />

		<!--error 페이지 지정할 수 있따. -->
		<!--에러페이지만 제공하는 경우 사용자가 접근했던 URI자체는 변화가 없다 접근 제한이 된 경우 다양한 처리를 하고 싶다면 직접 
			AccessDeniedHandler 인터페이스를 구현하는 것이 좋다 접근 제한되었을때 쿠키나 세션에 특정한 작업을하거나 특정한 헤더 
			정보를 추가하는 등의 행위 -->
		<!-- <security:access-denied-handler error-page="/accessError"/> -->

		<!--에러 페이지 속성 대신 customAccessDeniedHandler 빈으로 등록해서 사용 -->
		<security:access-denied-handler
			ref="customAccessDeniedHandler" />
			
		<security:form-login login-page="/customLogin" authentication-success-handler-ref="customLoginSuccessHandler"/>
	
		<!-- 로그아웃시 페이지 설정과 세션 무효화  -->
		<security:logout logout-url="/customLogout" invalidate-session="true" /> <!-- 로그아웃 후 이동페이지 기본값은 security:form-login  설정된 login-page="/customLogin" 
																					 변경할려면 logout-success-url 속성으로 변경가능 		 -->


		

		<!-- 로그인 화면 디자인문제로 별도의 uri이용해서 로그인 페이지 제작해서 사용 -->
		<security:form-login login-page="/customLogin" />

	</security:http>

	<!--단순 문자열만 이용하고 싶은 경우 -->
	<!-- <security:http auto-config="true" use-expressions="false"> <security:intercept-url 
		pattern="/sample/all" access="ROLE_MEMBER"/> <security:intercept-url pattern="/sample/all" 
		access="ROLE_ADMIN"/> </security:http> -->

	<security:authentication-manager>

              <!-- customUserDetailsService 속성값 작성 -->
		<security:authentication-provider user-service-ref="customUserDetailsService">

<!-- 			<security:jdbc-user-service data-source-ref="dataSource"
			users-by-username-query="select userid, userpw password,enabled from tbl_member where userid=?" 
			authorities-by-username-query="select userid username, auth authority from tbl_member_auth where userid=?"/> -->
			
			
			
			<!-- <security:password-encoder ref="customNoOpPasswordEncoder"/> -->
			
			<security:password-encoder ref="bcryptPasswordEncoder"/> 

		</security:authentication-provider>

	</security:authentication-manager>

</beans>
